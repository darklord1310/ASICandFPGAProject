module instructionCycleOp_tb();
 // instructionCycleOp(inputOfIR, inputOfRAM,outputFromRAM,IRload, JMPmux, PCload, Reset, Meminst, MemWr, Clock, IR)
 
//Set input as register and output as wires
reg		IRload, Reset, Clock, JMPmux, PCload, MemWr, Meminst;
reg		[7:0] inputOfRAM , inputOfIR;
wire    [2:0] IR;
wire    [4:0] RAM_Address;
wire	[7:0] outputFromRAM;

//Instantiate design code
instructionCycleOp test (inputOfIR, inputOfRAM,outputFromRAM,IRload, JMPmux, PCload, Reset, Meminst, MemWr, Clock, IR, RAM_Address, lower5bits_IR);

//Test vector start here
initial
begin
//Initialize all inputs
#0 Clock = 0; Reset = 1; IRload = 0; JMPmux = 0; PCload = 0; Meminst = 1; MemWr = 1; inputOfRAM = 8'd10;        //expect address 0 has 10
#10 Reset = 0;
#10 Meminst = 1; MemWr = 0;                                                                                     //expect 10 at address 0
// #10 MemWr = 0;

// #10 IRload = 1; PCload = 1; Meminst = 0;
// #10 MemWr = 1;
// #10 idata = 8'd0;
// #10 MemWr = 0;

// #30 PCload = 1; Meminst = 0;
// #10 JMPmux = 0; MemWr = 1;
// #10 idata = 8'd2; JMPmux = 1; PCload = 0;
// #10 MemWr = 0;

// #10 PCload = 1;

#30 $stop;
end

//Clock pulse generator
always #5 Clock = ~Clock;

endmodule